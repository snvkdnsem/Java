class OperatorEx23 {
	public static void main(String[] args) {
		// 문자열은  new 연산자 없이 다음과 같은 짧은 문법으로 등록하는 것을 권장한다.
		// 다음 문법으로 문자열을 저장하고 시도하면
		// 해당 문자열이 이미 메모리에 존재하는지 확인하고 있으면 그대로 사용하고 없으면 새로운 객체를 만들어서 참조를 할당한다.
		// 문자열 불변방식으로 관리된다.
		String str1 = "abc"; // <== new, abc를 가지고 있는 객체를 메모리에서 하나만 만들어서 가지고 있어야 낭비가 안된다.
		
		String a = str1;
		String b = "abc"; // 위에서 만든객체 참조
		
		// 문자열 데이터 재 사용성을 극대화하여 메모리를 아끼고자
		//해당 문자열을 갖고 있는 String 객체가 존재하면 그 객체를 그대로 사용한다.
		
		System.out.println(b.length());
		System.out.println("abc".length()); // "문자열" 하는 것 만으로 String 객체로 인정한다.
		
		
		System.out.println(str1 == a);
		System.out.println(str1 == b);
		
		// String도 클래스이기 때문에 원한다면 new 연산자로 객체를 만들고 그 객체가 문자열을 보관하도록 할 수 있다.
		String str2 = new String("abc");
		
		System.out.printf("\"abc\"==\"abc\" ? %b%n", "abc"=="abc");
		System.out.printf(" str1==\"abc\" ? %b%n",    str1=="abc");
		System.out.printf(" str2==\"abc\" ? %b%n",    str2=="abc");
		
		// 문자열은 힙영역에 객체가 갖고 있는다.
		// 그런데 비교연산자 == 로 비교를 시도하면 이는 참조 값을 비교하는 것이므로
		// 실제값을 보관하는 값을 비교하고자 할 대 적당하지 않다.
		// 변수가 가리키는 실제 객체가 보관하는 문자열 자체를 비교하고자 할 때 equals 메소드를 사용해야 한다.
		
		System.out.printf("str1.equals(\"abc\") ? %b%n", str1.equals("abc"));
		System.out.printf("str2.equals(\"abc\") ? %b%n", str2.equals("abc"));
		System.out.printf("str2.equals(\"ABC\") ? %b%n", str2.equals("ABC"));
		System.out.printf("str2.equalsIgnoreCase(\"ABC\") ? %b%n", str2.equalsIgnoreCase("ABC"));
	}
}
